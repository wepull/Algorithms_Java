# ********RoostGPT********

# Test generated by RoostGPT for test Karate-Integration using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=4992e43bd0
# ROOST_METHOD_SIG_HASH=cb107cc3ec
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Enable WiFi for a new customer',
#     steps: 'Given a new customer with subscriber ID "SVTAL005" has just had their fiber service installed\n' +
#       'When the support representative uses the configuration API to enable WiFi\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to see and connect to their new WiFi network',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: WiFi Troubleshooting for Fiber Internet Customers

  Background:
    * def APPOINTMENT_V2_80D7DADBB1_URL = karate.properties['APPOINTMENT_V2_80D7DADBB1_URL'] || karate.get('APPOINTMENT_V2_80D7DADBB1_URL', 'http://localhost:4010')
    * def APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN = karate.properties['APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN'] || karate.get('APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN', 'Bearer_Dummy_Token')
    * configure headers = {'Authorization': '#(APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN)'}

  Scenario: Enable WiFi for a new customer - Appointment Confirmation Success
    * url APPOINTMENT_V2_80D7DADBB1_URL
    Given path '/appointmentConfirmation'
    * def confirmationPayload =
      """
      {
        "appointment": {
          "confirmation": true,
          "id": "SVTAL005"
        }
      }
      """
    When method post
    And request confirmationPayload
    Then status 200
    And match response ==
      """
      {
        "control": {
          "code": "#string",
          "message": "#string",
          "type": "S"
        }
      }
      """

  Scenario: Enable WiFi for a new customer - Appointment Confirmation Unauthorized
    * url APPOINTMENT_V2_80D7DADBB1_URL
    Given path '/appointmentConfirmation'
    * def invalidConfirmationPayload =
      """
      {
        "appointment": {
          "confirmation": true,
          "id": "INVALID_SUBSCRIBER_ID"
        }
      }
      """
    When method post
    And request invalidConfirmationPayload
    Then status 401
    And match response ==
      """
      {
        "code": "#string",
        "message": "#string",
        "type": "E"
      }
      """

  Scenario: Search Time Slot for a new customer - Success
    * url APPOINTMENT_V2_80D7DADBB1_URL
    Given path '/searchTimeSlot'
    * def queryParams =
      """
      {
        "addressId": 12345,
        "subscriberId": "SVTAL005",
        "associatedDocument": "DOC001",
        "startDate": "2023-04-01T09:00:00Z",
        "finishDate": "2023-04-01T17:00:00Z",
        "orderType": "Instalacao",
        "productType": ["Banda Larga"]
      }
      """
    When method get
    And params queryParams
    Then status 200
    And match response ==
      """
      {
        "control": {
          "code": "#string",
          "message": "#string",
          "type": "S"
        },
        "slots": "#array"
      }
      """
