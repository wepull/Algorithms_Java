# ********RoostGPT********

# Test generated by RoostGPT for test Karate-Integration using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=75c9169c0c
# ROOST_METHOD_SIG_HASH=7a25c565c6
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve weak WiFi signal',
#     steps: 'Given a customer with subscriber ID "SVTAL001" reports a weak WiFi signal\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate low WiFi signal strength\n' +
#       'When the support representative uses the configuration API to change the WiFi channel\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi signal strength',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: WiFi Troubleshooting for Fiber Internet Customers

  Background:
    * def APPOINTMENT_V2_80D7DADBB1_URL = karate.properties['APPOINTMENT_V2_80D7DADBB1_URL'] || karate.get('APPOINTMENT_V2_80D7DADBB1_URL', 'http://localhost:4010')
    * def APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN = karate.properties['APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN'] || karate.get('APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN', 'Bearer_Dummy_Token')

  Scenario: Diagnose and resolve weak WiFi signal - Appointment Confirmation
    * url APPOINTMENT_V2_80D7DADBB1_URL
    Given path '/appointmentConfirmation'
    And header Authorization = APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN
    And request
      """
      { 
        "appointment": { 
          "confirmation": true, 
          "id": "SVTAL001" 
        } 
      }
      """
    When method post
    Then status 200
    And match response.control == '#object'
    And match response.control.code == '#string'
    And match response.control.message == '#string'
    And match response.control.type == 'S'

  Scenario: Diagnose and resolve weak WiFi signal - Search Time Slot
    * url APPOINTMENT_V2_80D7DADBB1_URL
    Given path '/searchTimeSlot'
    And param addressId = 123
    And param subscriberId = 'SVTAL001'
    And param associatedDocument = 'DOC001'
    And param startDate = '2023-04-01T00:00:00Z'
    And param finishDate = '2023-04-07T00:00:00Z'
    And param orderType = 'Instalacao'
    And param productType = ['Banda Larga']
    When method get
    Then status 200
    And match response.control == '#object'
    And match response.slots == '#array'
    And match response.slots[0] == '#object'
    And match response.slots[0].expireIn == '#number'
    And match response.slots[0].finishDate == '#string'
    And match response.slots[0].id == '#string'
    And match response.slots[0].startDate == '#string'

  Scenario: Negative Test - Invalid Appointment Confirmation
    * url APPOINTMENT_V2_80D7DADBB1_URL
    Given path '/appointmentConfirmation'
    And header Authorization = APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN
    And request
      """
      { 
        "appointment": { 
          "confirmation": "invalid", 
          "id": "SVTAL001" 
        } 
      }
      """
    When method post
    Then status 400
    And match response.code == '#string'
    And match response.message == '#string'
    And match response.type == 'E'

  Scenario: Negative Test - Search Time Slot with Invalid Parameters
    * url APPOINTMENT_V2_80D7DADBB1_URL
    Given path '/searchTimeSlot'
    And param addressId = 'invalid'
    And param subscriberId = 'SVTAL001'
    And param associatedDocument = 'DOC001'
    And param startDate = 'not-a-date-time'
    And param finishDate = 'not-a-date-time'
    And param orderType = 'InvalidOrderType'
    When method get
    Then status 400
    And match response.code == '#string'
    And match response.message == '#string'
    And match response.type == 'E'
