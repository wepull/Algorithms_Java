# ********RoostGPT********

# Test generated by RoostGPT for test Karate-Integration using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=6105ffde10
# ROOST_METHOD_SIG_HASH=e3af0b476f
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Troubleshoot and resolve a failed configuration change',
#     steps: 'Given a customer with subscriber ID "SVTAL006" requests a WiFi configuration change\n' +
#       'When the support representative uses the configuration API to make the requested change\n' +
#       'And the configuration API returns an error response\n' +
#       'Then the support representative should initiate a diagnostic test\n' +
#       'And the service test API should return a test ID\n' +
#       'And the diagnostic result should provide details about the configuration failure\n' +
#       'When the support representative resolves the identified issue and retries the configuration change\n' +
#       'Then the configuration API should return a success response\n' +
#       "And the customer's WiFi should reflect the requested changes",
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: WiFi Troubleshooting for Fiber Internet Customers

  Background:
    * def APPOINTMENT_V2_80D7DADBB1_URL = karate.properties['APPOINTMENT_V2_80D7DADBB1_URL'] || karate.get('APPOINTMENT_V2_80D7DADBB1_URL', 'http://localhost:4010')
    * def APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN = karate.properties['APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN'] || karate.get('APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN', 'Bearer_Dummy_Token')

  Scenario: Troubleshoot and resolve a failed configuration change - Post Appointment
    * url APPOINTMENT_V2_80D7DADBB1_URL
    And path '/appointment'
    And header Authorization = APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN
    And request
      """
      {
        "appointment": {
          "reason": "WiFi configuration change",
          "slot": { "id": "slot001" }
        }
      }
      """
    When method post
    Then status 400
    And match response ==
      """
      {
        "code": "#string",
        "message": "#string",
        "type": "#string"
      }
      """

  Scenario: Search available time slots
    * url APPOINTMENT_V2_80D7DADBB1_URL
    And path '/searchTimeSlot'
    And param addressId = 12345
    And param associatedDocument = 'doc001'
    And param startDate = '2023-04-01T00:00:00Z'
    And param finishDate = '2023-04-01T23:59:59Z'
    And param orderType = 'Instalacao'
    When method get
    Then status 200
    And match response.slots == '#array'
    And match response.slots[0] ==
      """
      {
        "expireIn": "#number",
        "finishDate": "#string",
        "id": "#string",
        "startDate": "#string"
      }
      """

  Scenario: Retry configuration change - Patch Appointment
    * url APPOINTMENT_V2_80D7DADBB1_URL
    And path '/appointment/{appointmentId}'
    And pathParams appointmentId = 'appt001'
    And header Authorization = APPOINTMENT_V2_80D7DADBB1_AUTH_TOKEN
    And request
      """
      {
        "appointment": {
          "reason": "Retry WiFi configuration change",
          "slot": { "id": "slot001" }
        }
      }
      """
    When method patch
    Then status 200
    And match response.appointment ==
      """
      {
        "finishDate": "#string",
        "id": "#string",
        "priority": "#object",
        "startDate": "#string"
      }
      """
